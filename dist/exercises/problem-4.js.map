{"version":3,"sources":["../../src/exercises/problem-4.js"],"names":["findLargestPalindrome","multiplicandLength","limit","Math","pow","recur","n0","n1","found","product","isPalendrome","bind","val","str","toString","split","reverse","join"],"mappings":";;;;;;;AAAA;;AAEA,SAASA,qBAAT,CAA+BC,kBAA/B,EAAmD;AAClD,KAAIC,QAAQC,KAAKC,GAAL,CAAS,EAAT,EAAaH,kBAAb,IAAmC,CAA/C;;AAEA,UAASI,KAAT,CAAeC,EAAf,EAAmBC,EAAnB,EAAuBL,KAAvB,EAA8BM,KAA9B,EAAqC;AACpC,MAAIC,UAAUH,KAAGC,EAAjB;;AAEA,MAAIA,OAAOL,KAAP,IAAgBO,WAAWD,KAA/B,EAAsC,OAAOA,KAAP;;AAEtC,MAAKE,aAAaD,OAAb,KAAyBA,UAAUD,KAAxC,EAAgDA,QAAQC,OAAR;;AAEhD,MAAIF,KAAK,CAAT,EAAY;AACX,UAAOF,MAAMM,IAAN,CAAY,IAAZ,EAAkBL,EAAlB,EAAsBC,KAAG,CAAzB,EAA4BL,KAA5B,EAAmCM,KAAnC,CAAP;AACA,GAFD,MAEO;AACN,UAAOH,MAAMM,IAAN,CAAY,IAAZ,EAAkBL,KAAG,CAArB,EAAwBJ,KAAxB,EAA+BA,KAA/B,EAAsCM,KAAtC,CAAP;AACA;AACD;;AAED,QAAO,yBAAWH,MAAMM,IAAN,CAAW,IAAX,EAAiBT,KAAjB,EAAwBA,KAAxB,EAA+BA,KAA/B,EAAsC,CAAtC,CAAX,CAAP;AACA;;AAED,SAASQ,YAAT,CAAuBE,GAAvB,EAA6B;AAC5B,KAAIC,MAAMD,IAAIE,QAAJ,EAAV;AACA,QAAOD,QAAQA,IAAIE,KAAJ,CAAU,EAAV,EAAcC,OAAd,GAAwBC,IAAxB,CAA6B,EAA7B,CAAf;AACA;;QAEQP,Y,GAAAA,Y;QAAcV,qB,GAAAA,qB","file":"problem-4.js","sourcesContent":["import {trampoline} from \"../helpers\"\n\nfunction findLargestPalindrome(multiplicandLength) {\n\tlet limit = Math.pow(10, multiplicandLength) - 1;\n\n\tfunction recur(n0, n1, limit, found) {\n\t\tlet product = n0*n1;\n\n\t\tif (n1 === limit && product <= found) return found;\n\n\t\tif ( isPalendrome(product) && product > found ) found = product;\n\n\t\tif (n1 > 1) {\n\t\t\treturn recur.bind( null, n0, n1-1, limit, found );\n\t\t} else {\n\t\t\treturn recur.bind( null, n0-1, limit, limit, found );\n\t\t}\n\t}\n\n\treturn trampoline(recur.bind(null, limit, limit, limit, 0))\n}\n\nfunction isPalendrome( val ) {\n\tlet str = val.toString();\n\treturn str === str.split('').reverse().join('');\n}\n\nexport { isPalendrome, findLargestPalindrome }"]}